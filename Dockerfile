FROM python:3.11-alpine
#Вказуємо базовий образ

#Опціональна інструкція, яка задає автора або відповідальну особу за цей Dockerfile.
MAINTAINER Some Dev
#PYTHONDONTWRITEBYTECODE=1: Забороняє Python створювати файли байт-коду (.pyc). Це корисно для зменшення непотрібних файлів у контейнері.
#PYTHONUNBUFFERED=1: Вмикає небуферизовані логі для кращої інтерактивності при логуванні в реальному часі.
#PIP_NO_CACHE_DIR=off: Вказує, що PIP не повинен кешувати встановлені пакети. Це дозволяє зекономити місце, але може трохи уповільнити встановлення залежностей.
#PIP_DISABLE_PIP_VERSION_CHECK=on: Вимикає перевірку оновлень PIP при кожному запуску.
#PIP_DEFAULT_TIMEOUT=100: Встановлює стандартний тайм-аут для PIP-запитів (в секундах).
#POETRY_VERSION=1.8.2: Встановлює конкретну версію Poetry (1.8.2), яка буде інстальована.
#POETRY_NO_INTERACTION=1: Вказує Poetry не просити ніяких інтерфейсних дій під час інсталяції.
#DEBIAN_FRONTEND=noninteractive: Використовується для уникнення інтерактивних запитів при інсталяції пакетів в Debian-подібних системах.
# У Alpine це не має великого значення, але часто додається для кросс-сумісності.
#COLUMNS=80: Встановлює ширину терміналу для коректного виводу в логах.
ENV PYTHONDONTWRITEBYTECODE=1 \
       PYTHONUNBUFFERED=1 \
       PIP_NO_CACHE_DIR=off \
       PIP_DISABLE_PIP_VERSION_CHECK=on \
       PIP_DEFAULT_TIMEOUT=100 \
       POETRY_VERSION=1.8.2 \
       POETRY_NO_INTERACTION=1 \
       DEBIAN_FRONTEND=noninteractive \
       COLUMNS=80


RUN apk update
#Оновлює індекси пакетів для Alpine, щоб мати доступ до найсвіжіших версій програмного забезпечення.
RUN apk add --no-cache gcc musl-dev mariadb-dev curl
#gcc: Інсталює компілятор GCC (GNU Compiler Collection) для збірки пакетів, що потребують компіляції (наприклад, C-розширення).
#musl-dev: Набір заголовків для компіляції з використанням бібліотеки Musl (альтернатива glibc, стандартної бібліотеки C в Linux).
#mariadb-dev: Інструменти для розробки з використанням MariaDB/MySQL (потрібні для інтеграції з MySQL базою даних).
#curl: Інструмент для завантаження даних через різні протоколи (наприклад, для завантаження Poetry).
#Використання --no-cache допомагає уникнути зберігання кешу пакетів після інсталяції, щоб зекономити місце в контейнері.
RUN mkdir /app
#Створюється директорія /app, в якій буде знаходитися додаток.
WORKDIR /app
#Встановлюється робоча директорія для подальших інструкцій.
#Всі наступні команди будуть виконуватись у цій директорії.
ENV POETRY_HOME=/usr/local/poetry
#Встановлюється змінна середовища POETRY_HOME, що вказує на місце, де буде інстальовано Poetry.
RUN curl -sSL https://install.python-poetry.org | python3 -
#Завантажується та встановлюється Poetry за допомогою curl. \
#Ця команда використовує Python 3 для інсталяції Poetry у директорію, вказану в змінній POETRY_HOME.
ENV PATH=$POETRY_HOME/bin:$PATH
#Додається директорія з виконуваними файлами Poetry в системний шлях ($PATH),
#щоб можна було використовувати команду poetry без вказування повного шляху.
COPY pyproject.toml /app/
#Копіює файл pyproject.toml (дефолтний файл з описом залежностей для Poetry)
# з локальної файлової системи в директорію /app у контейнері.
RUN poetry config virtualenvs.create false
#Вказує Poetry не створювати ізольовані віртуальні середовища.  \
#Це робиться для того, щоб встановити залежності безпосередньо  \
#в системне Python-середовище контейнера, а не в окрему віртуальну середу.
RUN poetry lock
#Створює або оновлює файл poetry.lock, який містить точні версії залежностей, \
#які будуть інстальовані. Це забезпечує стабільність залежностей під час подальших запусків.
RUN poetry install
#Інсталює всі залежності, зазначені у файлі pyproject.toml (з урахуванням точних версій з файлу poetry.lock).